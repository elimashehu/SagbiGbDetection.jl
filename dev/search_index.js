var documenterSearchIndex = {"docs":
[{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"CurrentModule = SagbiGbDetection","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Documentation for SagbiGbDetection.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Pages = [\"SagbiGBDetection_examples.md\"]","category":"page"},{"location":"SagbiGBDetection_examples.html#SagbiGbDetection","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"A julia package for finding the term order for which the given generators of an ideal form the Gröbner basis or the given generators of a finitely generated subalgebra of a polynomial ring are the SAGBI basis. If there is no such term order, then the given set of generators of an ideal or subalgebra is not a Gröbner basis or SAGBI basis respectively for any term order","category":"page"},{"location":"SagbiGBDetection_examples.html#Gröbner-Basis-Detection","page":"SagbiGbDetection","title":"Gröbner Basis Detection","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html#Introduction","page":"SagbiGbDetection","title":"Introduction","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"SagbiGbDetection allows to compute the term order for which the given generators of an ideal form the Gröbner basis. ","category":"page"},{"location":"SagbiGBDetection_examples.html#Functionality","page":"SagbiGbDetection","title":"Functionality","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"The first main functionality of this package includes weightVectorsRealizingGB(G, R). A function for extracting the weight vectors for which the given set of polynomials is a Gröbner basis.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Given a set of polynomials (G) and a polynomial ring (R) as input, the function produces an array of weight vectors for which the provided set of polynomials adheres to the Buchberger Criterion. It also yields a Boolean value, which is 'True' when the set of polynomials constitutes a Gröbner basis for all weight vectors, and 'False' when it does not.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"using SagbiGbDetection","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"julia> R, (x, y) = Singular.polynomial_ring(Singular.QQ, [\"x\",\"y\"])\n(Singular Polynomial Ring (QQ),(x,y),(dp(2),C), spoly{n_Q}[x, y])\n\njulia> G = [y^2-x, x^2-1]\n2-element Vector{spoly{n_Q}}:\n y^2 - x\n x^2 - 1\n","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"julia> weightVectorsRealizingGB(G, R)\n(Vector{ZZRingElem}[[2, 2]], false)","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"\nweightVectorsRealizingGB(G::Vector{spoly{n_Q}}, R::Singular Polynomial Ring (QQ))\n\nProvides a set of weight vectors, which may also be empty, for which the provided \nvector of polynomials 'G' serves as a Groebner basis. Additionally, it returns a Boolean \nvalue indicating whether this is a Groebner basis for all the weight vectors generated by the method or not.\n\n# Arguments\n- `G::Vector{spoly{n_Q}}`: input generators.\n- `R::Singular Polynomial Ring (QQ)`: polynomial ring over Q.","category":"page"},{"location":"SagbiGBDetection_examples.html#Examples","page":"SagbiGbDetection","title":"Examples","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"\njulia> using SagbiGbDetection\n\njulia> R, (x, y) = Singular.polynomial_ring(Singular.QQ, [\"x\",\"y\"])\n(Singular Polynomial Ring (QQ),(x,y),(dp(2),C), spoly{n_Q}[x, y])\n\njulia> G = [y^2-x, x^2-1]\n2-element Vector{spoly{n_Q}}:\n y^2 - x\n x^2 - 1\n\njulia> weightVectorsRealizingGB(G, R)\n(Vector{ZZRingElem}[[2, 2]], false)","category":"page"},{"location":"SagbiGBDetection_examples.html#SAGBI-Basis-Detection","page":"SagbiGbDetection","title":"SAGBI Basis Detection","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html#Introduction-2","page":"SagbiGbDetection","title":"Introduction","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"SagbiGbDetection allows to compute the term order for which the given generators of a finitely generated subalgebra of a polynomial ring are the SAGBI basis. ","category":"page"},{"location":"SagbiGBDetection_examples.html#Functionality-2","page":"SagbiGbDetection","title":"Functionality","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"The second main functionality of this package includes weightVectorsRealizingSAGBI(G, R). A function that identifies weight vectors that meet the SAGBI criterion for a specified set of polynomials.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Given a set of polynomials (G) and a polynomial ring (R) as input, the function provides an array of weight vectors that satisfy the SAGBI criterion, along with a Boolean value indicating whether the SAGBI criterion is met for all weight vectors, where 'True' signifies compliance and 'False' denotes non-compliance.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"    weightVectorsRealizingSAGBI(G::Vector{spoly{n_Q}} and R <: Polynomial Ring over Q)\n\nReturns an array of weight vectors, which may also be empty, for which the provided vector of \npolynomials 'G' constitutes a SAGBI basis. It also provides a true or false message indicating whether \nthis is a SAGBI basis for all of the weight vectors generated by the method or not.\n\n# Arguments\n- `G::Vector{spoly{n_Q}} and R <: Polynomial Ring over Q: input generators.","category":"page"},{"location":"SagbiGBDetection_examples.html#Examples-2","page":"SagbiGbDetection","title":"Examples","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"\njulia> using SagbiGbDetection\n\njulia> R, (l, x, y, z) = Singular.polynomial_ring(Singular.QQ, [\"l\",\"x\",\"y\",\"z\"])\n(Singular Polynomial Ring (QQ),(l,x,y,z),(dp(4),C), spoly{n_Q}[l, x, y, z])\n\njulia> G = [z, z*x, z*y, z*x*(x^2+y^2),z*y*(x^2+y^2), l*z, l*z*x, l*z*y, l*z*x*(x^2+y^2), l*z*y*(x^2+y^2)]\n10-element Vector{spoly{n_Q}}:\n z\n x*z\n y*z\n x^3*z + x*y^2*z\n x^2*y*z + y^3*z\n l*z\n l*x*z\n l*y*z\n l*x^3*z + l*x*y^2*z\n l*x^2*y*z + l*y^3*z\n\njulia> weightVectorsRealizingSAGBI(G,R)\n(Vector{ZZRingElem}[[1, 2, 1, 1], [1, 1, 2, 1]], true) \n","category":"page"},{"location":"SagbiGBDetection_examples.html#Extract-Weight-Vectors","page":"SagbiGbDetection","title":"Extract Weight Vectors","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"To define different term orders, the function extractWeightVectors(G) computes the Newton polytope of the set of given generators G and for each vertex of the polytope, it decides if the normal cone to this vertex intersects the positive orthant. If this happens then it selects a weight w in the intersection which serves as a term order in the detection algorithms.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"julia> extractWeightVectors(G)\n2-element Vector{Vector{ZZRingElem}}:\n [-2, -2]\n [-3, -1]","category":"page"},{"location":"SagbiGBDetection_examples.html#S-polynomial","page":"SagbiGbDetection","title":"S-polynomial","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Given two polynomials f and g the function Spair(f, g) computes the S-polynomial. ","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"julia> Spair(G[1], G[2])\n-x^3 + y^2","category":"page"},{"location":"SagbiGBDetection_examples.html#Buchberger-Criterion-and-SAGBI-criterion","page":"SagbiGbDetection","title":"Buchberger Criterion and SAGBI criterion","text":"","category":"section"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Given a set of polynomials GS in a ring R, the function BuchbergerCriterion(GS, R)  is for checking the Buchberger criterion for the set of polynomials GS.","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"julia> BuchbergerCriterion(G,R)\ntrue","category":"page"},{"location":"SagbiGBDetection_examples.html","page":"SagbiGbDetection","title":"SagbiGbDetection","text":"Similarly, SagbiCriterion(G, R, w::Vector{Int}) is a function for checking if a set of polynomials satisfies the SAGBI criterion.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = SagbiGbDetection","category":"page"},{"location":"index.html#SagbiGbDetection","page":"Home","title":"SagbiGbDetection","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Documentation for SagbiGbDetection.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"SagbiGbDetection is a computer algebra package for the Julia programming  language, maintained by Viktoriia Borovik, Tim Duff and Elima Shehu.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"https://github.com/elimashehu/SagbiGbDetection.jl (Source code)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The features of SagbiGbDetection include algorithms for detecting if a given set of polynomials form a Gröbner bases or SAGBI basis respectively with respect to some term order.","category":"page"},{"location":"index.html#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Please see https://julialang.org/downloads/  for instructions on how to obtain julia for your system.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"SagbiGbDetection requires Julia 1.8 or newer. In principle it can be installed and used like any other Julia package:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> ]add SagbiGbDetection","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia> using Pkg\njulia> Pkg.add(\"SagbiGbDetection\")","category":"page"}]
}
